generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Permission {
  FULLACCESS
  ADD
  EDIT
  DELETE
  VIEW
}

model User {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String        @unique
  picture           String?
  provider          String
  providerAccountId String
  role              UserRole      @default(USER)
  permissions       Permission[]  @default([])
  Project           Project[]
  userProjects      UserProject[] @relation("UserProjects")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Project {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String        @unique
  description  String?
  apiKey       String        @unique
  ownerId      String        @db.ObjectId
  owner        User          @relation(fields: [ownerId], references: [id])
  userProjects UserProject[] @relation("UserProjects")
  ProjectUser  ProjectUser[]
  Category     Categories[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model UserProject {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @db.ObjectId
  user        User         @relation("UserProjects", fields: [userId], references: [id])
  project     Project      @relation("UserProjects", fields: [projectId], references: [id])
  projectId   String       @db.ObjectId
  permissions Permission[] @default([])

  @@unique([userId, projectId])
  @@map("user_projects")
}

model Categories {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  title     String       @unique
  slug      String?      @unique
  type      String
  parentId  String?      @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  parent    Categories?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Categories[] @relation("CategoryToCategory")
  project   Project      @relation(fields: [projectId], references: [id])
  projectId String       @db.ObjectId
  Product   Product[]

  @@map("categories")
}

model ProjectUser {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String?
  phoneNumber  String    @unique
  otpCode      String?
  otpExpiresIn DateTime?
  project      Project   @relation(fields: [projectId], references: [id])
  projectId    String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("project_users")
}

model Product {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  categoryId         String     @db.ObjectId
  category           Categories @relation(fields: [categoryId], references: [id])
  title              String     @unique
  slug               String?    @unique
  description        String?
  colors             String[]
  sizes              String[]
  featured           Boolean?   @default(false)
  status             Boolean    @default(true)
  price              Float
  discountPercent    Float?
  countInStock       Int
  lowStockQtyWarning Int?
  stockVisibility    Boolean?   @default(false)
  refundable         Boolean?   @default(false)
  images             Json?
  attachments        Json?
  isInAuction        Boolean?   @default(false)
  auctionIds         String[]   @db.ObjectId
  basePrice          Float?
  priceStep          Float?
  seoMetaTitle       String?
  seoMetaDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}
